{
  Pretty much anything good in this code you can thank Slacky [atleast in part] for.
  Also thanks to Citrus for mentioning ffmpeg + how to use it via the command prompt
}

type
  TGameRecorder = record
    Timer: TMMLTimer;
    VideosFolder, MainFolder: String;
    FPS, Duration, TimeBetweenPics, FileNumber, KeepCopies,
    ClientDimensionW, ClientDimensionH, MouseSizeX, MouseSizeY: Int32;
    Frames: array of TMufasaBitmap;
    CanFree, SilentMode, OnlySaveOnTerminate, RecordMouse,
    Started, SavingVideo: Boolean;
    EveryLoop: Procedure;
    MouseColor: TColor;
  end;

var
  GameRecorder: TGameRecorder;

{
  Runs a command in the Command Prompt.
//Thanks @Citrus
}
procedure Execute(command: string; waitTillCompleted: boolean = true);
var
  Proc: TProcess;
begin
  Proc.Init(nil);
  Proc.setExecutable(command);

  if waitTillCompleted then
    //Proc.SetOptions(Proc.GetOptions + [poWaitOnExit]);
    Proc.SetOptions([poWaitOnExit]);

  Proc.Execute();
  Proc.Free();
end;

procedure TGameRecorder._Save(SaveName: string = '');
var
  i: Int32;
  VideoName, VideoNumber: string;
begin
  //Checking to make sure there's atleast 1 frame to save
  if length(self.Frames) < 1 then
  begin
    if not self.SilentMode then
      if not Self.Started then
        client.writeln('ERROR: Recorder is not running, can''t save file!')
      else
        client.writeln('WARNING: No more frames to save, exitting');
    exit();
  end;

  //Checking to see if we're already saving a video
  if Self.SavingVideo then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: Already saving a video! exitting.');
    exit();
  end else
    Self.SavingVideo := true;

  //Clearing /tmp/
  DeleteDirectory(self.VideosFolder + '/tmp', true);
  if DirectoryExists(self.VideosFolder + '/tmp') then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: Failed to delete ' + self.VideosFolder + '/tmp');
    Self.SavingVideo := false;
    exit();
  end;

  CreateDirectory(self.VideosFolder + '/tmp');
  if not DirectoryExists(self.VideosFolder + '/tmp') then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: Failed to create ' + self.VideosFolder + '/tmp');
    Self.SavingVideo := false;
    exit();
  end;

  //Saving bitmaps to file as imgX.jpg
  if not self.SilentMode then
    client.WriteLn('Saving ' + IntToStr(length(self.Frames)) + ' Images');
  for i:=0 to high(self.Frames) do
    self.Frames[i].SaveToFile(Format('%s/tmp/img%d.jpg', [self.VideosFolder, i+1]));

  //pics are cleared out only when doing a regular save, regular users calling .save() wont be clearing out recent images.
  if SaveName = '' then
  begin
    for i:=0 to high(self.Frames) do
      self.Frames[i].Free();
    SetLength(self.Frames, 0);
  end;

  //VideoName and VideoNumber
  if SaveName = '' then
  begin
    //If calling ._save() directly, with no SaveName
    if self.FileNumber >= (self.KeepCopies) then
    begin
      if not self.SilentMode then
        client.WriteLn('Deleting video: '+'output'+intToStr(self.FileNumber - self.KeepCopies + 1)+'.mp4');
      DeleteFile(self.VideosFolder +'/output'+intToStr(self.FileNumber - self.KeepCopies + 1)+'.mp4');
    end;
    inc(self.FileNumber);

    VideoName := 'output';
    VideoNumber := IntToStr(Self.FileNumber);
  end else
  begin
    //If User calls .Save(), which asks for a SaveName
    if FileExists(Self.VideosFolder + '/' + SaveName + '.mp4') then
    begin
      if not self.SilentMode then
        client.WriteLn('WARNING: ' + SaveName + '.mp4' + ' already exists. We are writing over that file now.');
      DeleteFile(Self.VideosFolder + '/' + SaveName + '.mp4');
    end;

    VideoName := SaveName;
    VideoNumber := ''; //unnecessary
  end;

  if not self.SilentMode then
    client.WriteLn('Generating video: '+VideoName+VideoNumber+'.mp4');

  Execute('ffmpeg -vtag xvid -framerate ' + ToStr(self.FPS) + ' -i "'+self.VideosFolder+'/tmp/img%01d.jpg" "'+self.VideosFolder+'/'+VideoName+VideoNumber+'.mp4'+'"');
  Self.SavingVideo := false;
end;

{
  To help differentiate between a user save and an internal _save
}
procedure TGameRecorder.Save(SaveName: string);
begin
  Self._Save(SaveName);
end;

procedure TGameRecorder.Capture(Junk, Sender: Pointer); static;
var
  FrameCount: int32;
  x, y: int32;
begin
  GameRecorder.CanFree := False;
  FrameCount := Length(GameRecorder.Frames);

  if (FrameCount * GameRecorder.TimeBetweenPics) < GameRecorder.Duration then
  begin
    SetLength(GameRecorder.Frames, FrameCount+1);
    GameRecorder.Frames[FrameCount].Init(client.GetMBitmaps);
    GameRecorder.Frames[FrameCount].CopyClientToBitmap(client.GetIOManager, True, 0,0, GameRecorder.ClientDimensionW-1, GameRecorder.ClientDimensionH-1);

    if GameRecorder.RecordMouse then
    begin
      Client.GetIOManager.GetMousePos(x, y);
      if (x > GameRecorder.MouseSizeX) and (x < GameRecorder.ClientDimensionW) and (y > GameRecorder.MouseSizeY) and (y < GameRecorder.ClientDimensionH) then
        GameRecorder.Frames[FrameCount].DrawTPA(TPAFromBox([x-GameRecorder.MouseSizeX, y-GameRecorder.MouseSizeY, x+GameRecorder.MouseSizeX, y+GameRecorder.MouseSizeY]), GameRecorder.MouseColor);
    end;
  end else
  begin
    if not (@GameRecorder.EveryLoop = nil) then
      GameRecorder.EveryLoop();

    if GameRecorder.OnlySaveOnTerminate then
    begin
      GameRecorder.Frames[0].Free();
      delete(GameRecorder.Frames, 0, 1);

      SetLength(GameRecorder.Frames, FrameCount);
      GameRecorder.Frames[FrameCount - 1].Init(client.GetMBitmaps);
      GameRecorder.Frames[FrameCount - 1].CopyClientToBitmap(client.GetIOManager, True, 0,0, GameRecorder.ClientDimensionW-1, GameRecorder.ClientDimensionH-1);
    end else
      GameRecorder._Save();
  end;

  GameRecorder.CanFree := True;
end;

procedure TGameRecorder.Stop();
var
  i: Int32;
begin
  if self.Timer = nil then
    exit();

  Client.WriteLn('Stopping Recorder and doing a final save.');

  Self.Timer.SetEnabled(False);
  Self._Save();
  Self.SavingVideo := false;

  while not Self.CanFree do Wait(5);
  Self.Timer.Free();
  for i:=0 to High(self.Frames) do Self.Frames[i].Free();
  SetLength(Self.Frames, 0);
end;

//I wanted to do something like `AddOnTerminate('Self.Stop');` but that didnt seem to work
procedure StopGameRecorder();
begin
  GameRecorder.Stop();

  //GameRecorder  //i was gonna add something here....hmm...
end;

procedure TGameRecorder.Start(ClipFPS, ClipDurationInSeconds: Int32);
begin
  if Self.VideosFolder = '' then Self.VideosFolder  := 'temp_videos';
  if Self.KeepCopies = 0 then Self.KeepCopies       := 2;
  if Self.MouseColor = 0 then Self.MouseColor       := 255;
  if Self.MouseSizeX = 0 then Self.MouseSizeX       := 1;
  if Self.MouseSizeY = 0 then Self.MouseSizeY       := 1;

  Self.FPS                                          := ClipFPS;
  Self.Duration                                     := ClipDurationInSeconds * 1000;
  Self.TimeBetweenPics                              := 1000 div Self.FPS;

  GetClientDimensions(Self.ClientDimensionW, Self.ClientDimensionH);
  if (Self.ClientDimensionW < 1) or (Self.ClientDimensionH < 1) then
  begin
    if not self.SilentMode then
      client.writeln('ERROR: client dimensions problem. Width: ' + IntToStr(Self.ClientDimensionW) + ' & Height: ' + IntToStr(Self.ClientDimensionH));
    exit(); //forces self.Timer to be nil, since it wont be init'd below
  end;

  //if need be, cuts off 1 pixel to make the dimensions even (for ffmpeg)
  if Self.ClientDimensionW mod 2 = 1 then Dec(Self.ClientDimensionW);
  if Self.ClientDimensionH mod 2 = 1 then Dec(Self.ClientDimensionH);

  //adds main folder to VideosFolder
  if Self.MainFolder <> '' then
  begin
    CreateDirectory(Self.MainFolder);
    if not DirectoryExists(Self.MainFolder) then
    begin
      if not Self.SilentMode then
        client.WriteLn('ERROR: unable to create directory ' + Self.MainFolder);
      exit();
    end;
    Self.VideosFolder := (Self.MainFolder + '/' + Self.VideosFolder);
  end;

  DeleteDirectory(Self.VideosFolder, true);
  if DirectoryExists(Self.VideosFolder) then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: unable to delete directory ' + Self.VideosFolder);
    exit();
  end;

  CreateDirectory(Self.VideosFolder);
  CreateDirectory(Self.VideosFolder+'/tmp/');

  if not DirectoryExists(Self.VideosFolder) then
  begin
    wait(1000); //incase file explorer was open, blocking us
    DeleteDirectory(Self.VideosFolder, true);
    CreateDirectory(Self.VideosFolder);
    CreateDirectory(Self.VideosFolder+'/tmp/');

    if not DirectoryExists(Self.VideosFolder) then
    begin
      if not self.SilentMode then
        client.writeln('ERROR: unable to create ' + Self.VideosFolder + ' directory');
      exit();
    end;
  end;

  Self.Timer.Init();
  Self.Timer.SetInterval(1000 div Self.FPS);
  Self.Timer.SetOnTimer(natify(@TGameRecorder.Capture));

  AddOnTerminate('StopGameRecorder');

  Self.Timer.SetEnabled(True);
  Self.Started := True;
end;
