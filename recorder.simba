{
  Pretty much anything good in this code you can thank Slacky [atleast in part] for.
  Also thanks to Citrus for mentioning ffmpeg + how to use it via the command prompt
}

type
  TVideoRecorder = record
    Timer: TMMLTimer;
    TempVideosFolder, MainFolder, TempImagesDir, PrevTempImagesDir: String;
    FPS, Duration, TimeBetweenPics, FileNumber, KeepCopies,
    ClientDimensionW, ClientDimensionH, MouseSizeX, MouseSizeY: Int32;
    Frames: array of TMufasaBitmap;
    CanFree, SilentMode, OnlySaveOnTerminate, RecordMouse,
    Started, SavingVideo: Boolean;
    EveryLoop: Procedure;
    MouseColor: TColor;
  end;

var
  VideoRecorder: TVideoRecorder;

{
  Runs a command in the Command Prompt.
//Thanks @Citrus
}
procedure Execute(command: string; waitTillCompleted: boolean = true);
var
  Proc: TProcess;
begin
  Proc.Init(nil);
  Proc.setExecutable(command);

  if waitTillCompleted then
    //Proc.SetOptions(Proc.GetOptions + [poWaitOnExit]);
    Proc.SetOptions([poWaitOnExit]);

  Proc.Execute();
  Proc.Free();
end;

function ReallyDeleteDirectory(Dir: string; Empty: boolean; Tries: int32 = 2): boolean;
var
  i: int32;
begin
  for i:=1 to Tries do
  begin
    DeleteDirectory(Dir, true);

    if DirectoryExists(Dir) then
      wait(500) //incase file explorer or something caused temporary problems here
    else
      exit(true); //Directory does not exist, hooray
  end;

  exit(false);
end;

function ReallyCreateDirectory(Dir: string; Tries: int32 = 2): boolean;
var
  i: int32;
begin
  for i:=1 to Tries do
  begin
    CreateDirectory(Dir);

    if not DirectoryExists(Dir) then
      wait(500) //incase file explorer or something else caused temporary problems here
    else
      exit(true); //Directory does exist, hooray
  end;

  exit(false);
end;

function TVideoRecorder._Save(SaveName: string = ''): boolean;
var
  i: Int32;
  VideoName, VideoNumber: string;
begin
  //Checking to make sure there's atleast 1 frame to save
  if length(self.Frames) < 1 then
  begin
    if not self.SilentMode then
      if not Self.Started then
        client.writeln('ERROR: Recorder is not running, can''t save file!')
      else
        client.writeln('WARNING: No more frames to save, exitting');
    exit(False);
  end;

  //Checking to see if we're already saving a video
  if Self.SavingVideo then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: Already saving a video! exitting.');
    exit(False);
  end else
    Self.SavingVideo := true;

  //Clearing \temp_images\
  Self.TempImagesDir := '\temp_images'+IntToStr(self.FileNumber - self.KeepCopies + 3);

  if not ReallyDeleteDirectory(self.TempVideosFolder + Self.TempImagesDir, true) then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: Failed to delete ' + self.TempVideosFolder + Self.TempImagesDir);

    Self.SavingVideo := false;
    exit(False);
  end;

  if not ReallyCreateDirectory(self.TempVideosFolder + Self.TempImagesDir) then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: Failed to create ' + self.TempVideosFolder + Self.TempImagesDir);

    Self.SavingVideo := false;
    exit(False);
  end;

  //Saving bitmaps to file as imgX.jpg
  if not self.SilentMode then
    client.WriteLn('Saving ' + IntToStr(length(self.Frames)) + ' Images');
  for i:=0 to high(self.Frames) do
    self.Frames[i].SaveToFile(Format('%s'+Self.TempImagesDir+'\img%d.jpg', [self.TempVideosFolder, i+1]));

  //pics are cleared out only when doing a regular save, users calling .save() wont be clearing out recent images.
  if SaveName = '' then
  begin
    for i:=0 to high(self.Frames) do
      self.Frames[i].Free();
    SetLength(self.Frames, 0);
  end;

  //Setting up VideoName and VideoNumber
  if SaveName = '' then
  begin
    //If calling ._save() directly, with no SaveName
    if self.FileNumber >= (self.KeepCopies) then
    begin
      if not self.SilentMode then
        client.WriteLn('Deleting video: \'+self.TempVideosFolder+'\output'+intToStr(self.FileNumber - self.KeepCopies + 1)+'.mp4');
      DeleteFile(self.TempVideosFolder +'\output'+intToStr(self.FileNumber - self.KeepCopies + 1)+'.mp4');

      if not self.SilentMode then
        client.WriteLn('Deleting Directory: \'+self.TempVideosFolder+'\temp_images'+IntToStr(self.FileNumber - self.KeepCopies + 1));
      ReallyDeleteDirectory(self.TempVideosFolder+'\temp_images'+IntToStr(self.FileNumber - self.KeepCopies + 1)+'\', true);
    end;
    inc(self.FileNumber);

    VideoName := 'output';
    VideoNumber := IntToStr(Self.FileNumber);
  end else
  begin
    //If User calls .Save(), which asks for a SaveName
    if FileExists(Self.TempVideosFolder + '\' + SaveName + '.mp4') then
    begin
      if not self.SilentMode then
        client.WriteLn('WARNING: ' + SaveName + '.mp4' + ' already exists. We are writing over that file now.');
      DeleteFile(Self.TempVideosFolder + '\' + SaveName + '.mp4');
    end;

    VideoName := SaveName;
    VideoNumber := ''; //unnecessary
  end;

  if not self.SilentMode then
    client.WriteLn('Generating video: \'+self.TempVideosFolder+'\'+VideoName+VideoNumber+'.mp4');

  Execute('ffmpeg -vtag xvid -framerate ' + ToStr(self.FPS) + ' -i "'+self.TempVideosFolder+Self.TempImagesDir+'\img%01d.jpg" "'+self.TempVideosFolder+'\'+VideoName+VideoNumber+'.mp4'+'"');
  Self.SavingVideo := false;
  Result := true;
end;

{
  To help differentiate between a user save and an internal _save
}
function TVideoRecorder.Save(SaveName: string): boolean;
begin
  result := Self._Save(SaveName);
end;

procedure TVideoRecorder.Capture(Junk, Sender: Pointer); static;
var
  FrameCount: int32;
  x, y: int32;
begin
  VideoRecorder.CanFree := False;
  FrameCount := Length(VideoRecorder.Frames);

  if (FrameCount * VideoRecorder.TimeBetweenPics) < VideoRecorder.Duration then
  begin
    SetLength(VideoRecorder.Frames, FrameCount+1);
    VideoRecorder.Frames[FrameCount].Init(client.GetMBitmaps);
    VideoRecorder.Frames[FrameCount].CopyClientToBitmap(client.GetIOManager, True, 0,0, VideoRecorder.ClientDimensionW-1, VideoRecorder.ClientDimensionH-1);

    if VideoRecorder.RecordMouse then
    begin
      Client.GetIOManager.GetMousePos(x, y);
      if (x > VideoRecorder.MouseSizeX) and (x < VideoRecorder.ClientDimensionW) and (y > VideoRecorder.MouseSizeY) and (y < VideoRecorder.ClientDimensionH) then
        VideoRecorder.Frames[FrameCount].DrawTPA(TPAFromBox([x-VideoRecorder.MouseSizeX, y-VideoRecorder.MouseSizeY, x+VideoRecorder.MouseSizeX, y+VideoRecorder.MouseSizeY]), VideoRecorder.MouseColor);
    end;
  end else
  begin
    if not (@VideoRecorder.EveryLoop = nil) then
      VideoRecorder.EveryLoop();

    if VideoRecorder.OnlySaveOnTerminate then
    begin
      VideoRecorder.Frames[0].Free();
      delete(VideoRecorder.Frames, 0, 1);

      SetLength(VideoRecorder.Frames, FrameCount);
      VideoRecorder.Frames[FrameCount - 1].Init(client.GetMBitmaps);
      VideoRecorder.Frames[FrameCount - 1].CopyClientToBitmap(client.GetIOManager, True, 0,0, VideoRecorder.ClientDimensionW-1, VideoRecorder.ClientDimensionH-1);
    end else
      VideoRecorder._Save();
  end;

  VideoRecorder.CanFree := True;
end;

procedure TVideoRecorder.Stop();
var
  i: Int32;
begin
  if self.Timer = nil then
    exit();

  if not Self.SilentMode then
    Client.WriteLn('Stopping Recorder and doing a final save.');

  Self.Timer.SetEnabled(False);
  Self._Save();
  Self.SavingVideo := false;

  while not Self.CanFree do Wait(5);
  Self.Timer.Free();
  for i:=0 to High(self.Frames) do Self.Frames[i].Free();
  SetLength(Self.Frames, 0);
end;

//I wanted to do something like `AddOnTerminate('Self.Stop');` but that didnt seem to work
procedure StopVideoRecorder();
begin
  VideoRecorder.Stop();
  //VideoRecorder  //I might've wanted to add something here....hmm...
end;

procedure TVideoRecorder.Start(ClipFPS, ClipDurationInSeconds: Int32);
begin
  //todo, add update checking

  if Self.TempVideosFolder = '' then Self.TempVideosFolder  := 'temp_videos';
  if Self.KeepCopies = 0 then Self.KeepCopies       := 2;
  if Self.MouseColor = 0 then Self.MouseColor       := 255;
  if Self.MouseSizeX = 0 then Self.MouseSizeX       := 1;
  if Self.MouseSizeY = 0 then Self.MouseSizeY       := 1;

  Self.FPS                                          := ClipFPS;
  Self.Duration                                     := ClipDurationInSeconds * 1000;
  Self.TimeBetweenPics                              := 1000 div Self.FPS;
  Self.TempImagesDir                                := '\temp_images'+IntToStr(self.FileNumber - self.KeepCopies + 3);

  GetClientDimensions(Self.ClientDimensionW, Self.ClientDimensionH);
  if (Self.ClientDimensionW < 1) or (Self.ClientDimensionH < 1) then
  begin
    if not self.SilentMode then
      client.writeln('ERROR: client dimensions problem. Width: ' + IntToStr(Self.ClientDimensionW) + ' & Height: ' + IntToStr(Self.ClientDimensionH));
    exit(); //forces self.Timer to be nil, since it wont be init'd below
  end;

  //if need be, cuts off 1 pixel to make the dimensions even (for ffmpeg)
  if Self.ClientDimensionW mod 2 = 1 then Dec(Self.ClientDimensionW);
  if Self.ClientDimensionH mod 2 = 1 then Dec(Self.ClientDimensionH);

  //adds main folder to TempVideosFolder
  if Self.MainFolder <> '' then
  begin
    if not ReallyCreateDirectory(Self.MainFolder) then
    begin
      if not Self.SilentMode then
        client.WriteLn('ERROR: unable to create directory ' + Self.MainFolder);
      exit();
    end;

    Self.TempVideosFolder := (Self.MainFolder + '\' + Self.TempVideosFolder);
  end;

  if not ReallyDeleteDirectory(self.TempVideosFolder, true) then
  begin
    if not self.SilentMode then
      client.WriteLn('ERROR: unable to delete directory ' + Self.TempVideosFolder);
    exit();
  end;

  if not ReallyCreateDirectory(Self.TempVideosFolder) then
  begin
    if not self.SilentMode then
      client.writeln('ERROR: unable to create ' + Self.TempVideosFolder + '\ directory');
    exit();
  end;

  if not ReallyCreateDirectory(Self.TempVideosFolder+Self.TempImagesDir+'\') then
  begin
    if not self.SilentMode then
      client.writeln('ERROR: unable to create ' + Self.TempVideosFolder+Self.TempImagesDir+'\ directory');
    exit();
  end;

  Self.Timer.Init();
  Self.Timer.SetInterval(1000 div Self.FPS);
  Self.Timer.SetOnTimer(natify(@TVideoRecorder.Capture));

  AddOnTerminate('StopVideoRecorder');

  Self.Timer.SetEnabled(True);
  Self.Started := True;
end;
